import React, { useState, useEffect } from 'react';
import { Box, Typography, Paper, TextField, Button, Grid, Stepper, Step, StepLabel, StepContent } from '@mui/material';
import AppButton from '../Button/AppButton';

interface CoursePageProps {
  courseTitle: string;
}

const CoursePage: React.FC<CoursePageProps> = ({ courseTitle }) => {
  const [activeStep, setActiveStep] = useState(0);
  const [chatMessages, setChatMessages] = useState<{ role: string; content: string }[]>([]);
  const [userInput, setUserInput] = useState('');

  const steps = [
    {
      label: "Introduction to the course",
      description: "Overview of what you'll learn and how to get the most out of this course."
    },
    {
      label: "Key concepts and terminology",
      description: "Essential vocabulary and foundational ideas you need to know."
    },
    {
      label: "Practical exercises and applications",
      description: "Hands-on activities to reinforce your learning and apply new skills."
    },
    {
      label: "Advanced techniques and strategies",
      description: "Taking your skills to the next level with more complex concepts and methods."
    },
    {
      label: "Final assessment and next steps",
      description: "Evaluate your progress and plan your continued growth in this area."
    }
  ];

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  const handleSendMessage = async () => {
    if (userInput.trim() === '') return;

    const newMessages = [
      ...chatMessages,
      { role: 'user', content: userInput },
      { role: 'ai', content: 'This is a simulated AI response. In a real application, this would be generated by your AI backend.' }
    ];
    setChatMessages(newMessages);
    setUserInput('');

    // Here you would typically send the user's message to your AI backend
    // and receive a response to add to the chat
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>{courseTitle}</Typography>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
            <Typography variant="h6" gutterBottom>Course Content</Typography>
            <Stepper activeStep={activeStep} orientation="vertical" >
              {steps.map((step, index) => (
                <Step key={step.label}>
                  <StepLabel
                    optional={
                      index === steps.length - 1 ? (
                        <Typography variant="caption" >Last step</Typography>
                      ) : null
                    }
                  >
                    {step.label}
                  </StepLabel>
                  <StepContent>
                    <Typography>{step.description}</Typography>
                    <Box sx={{ mb: 2 }}>
                      <AppButton
                        variant="contained"
                        onClick={handleNext}
                        sx={{ mt: 1, mr: 1 }}
                      >
                        {index === steps.length - 1 ? 'Finish' : 'Continue'}
                      </AppButton>
                      <Button
                        disabled={index === 0}
                        onClick={handleBack}
                        sx={{ mt: 1, mr: 1 }}
                      >
                        Back
                      </Button>
                    </Box>
                  </StepContent>
                </Step>
              ))}
            </Stepper>
            {activeStep === steps.length && (
              <Paper square elevation={0} sx={{ p: 3 }}>
                <Typography>All steps completed - you're finished</Typography>
                <AppButton   onClick={handleReset} sx={{ mt: 1, mr: 1 }}>
                  Reset
                </AppButton>
              </Paper>
            )}
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{ p: 2, mb: 2, height: '400px', display: 'flex', flexDirection: 'column' }}>
            <Typography variant="h6" gutterBottom>AI Assistant</Typography>
            <Box sx={{ flexGrow: 1, overflowY: 'auto', mb: 2 }}>
              {chatMessages.map((message, index) => (
                <Box key={index} sx={{ mb: 1, textAlign: message.role === 'user' ? 'right' : 'left' }}>
                  <Paper sx={{ p: 1, display: 'inline-block', bgcolor: message.role === 'user' ? 'primary.light' : 'background.paper' }}>
                    <Typography variant="body2">{message.content}</Typography>
                  </Paper>
                </Box>
              ))}
            </Box>
            <Box sx={{ display: 'flex' }}>
              <TextField
                fullWidth
                variant="outlined"
                placeholder="Ask a question..."
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              />
              <AppButton variant="contained"  onClick={handleSendMessage} sx={{ ml: 1 }}>Send</AppButton>
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default CoursePage;